name: Flutter Android App Bundle Build and Publish
on:
  workflow_dispatch: # Allows manual triggering of the workflow
jobs:
  flutter_android_bundle_build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
      - name: Setup Ruby for Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
          channel: 'stable'
      - name: Get dependencies
        working-directory: ./usr
        run: flutter pub get
      - name: Setup Android signing
        run: |
          echo "Setting up Android signing configuration..."
          # Create keystore file, ensure path name and content are correct
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > keystore.jks
          
          # Verify keystore file
          echo "Verifying if the keystore file is valid..."
          ls -la keystore.jks
          
          # Use keytool to verify the validity of the keystore and all alias details
          echo "Verifying keystore details..."
          keytool -list -v -keystore keystore.jks -storepass "${{ secrets.ANDROID_KEYSTORE_PASSWORD }}"
          
          # Ensure android directory exists (should normally exist, but just in case)
          echo "Ensuring android directory exists..."
          mkdir -p ./usr/android
          
          # Create key.properties file, ensure storeFile uses absolute path
          KEYSTORE_PATH="$(pwd)/keystore.jks"
          echo "Using keystore path: $KEYSTORE_PATH"
          
          echo "storeFile=$KEYSTORE_PATH" > ./usr/android/key.properties
          echo "storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" >> ./usr/android/key.properties
          echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" >> ./usr/android/key.properties
          echo "keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> ./usr/android/key.properties
          
          # Verify key.properties file content (without displaying passwords)
          echo "key.properties created at: ./usr/android/key.properties"
          cat ./usr/android/key.properties | grep -v "storePassword\|keyPassword"
          
          # Verify Gradle can correctly find key.properties
          echo "Verifying android directory structure..."
          ls -la ./usr/android/
          
          # Verify whether the keystore contains the specified alias
          echo "Verifying if the keystore contains the alias: ${{ secrets.ANDROID_KEY_ALIAS }}"
          keytool -list -v -keystore keystore.jks -storepass "${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" | grep -i "alias name: ${{ secrets.ANDROID_KEY_ALIAS }}"
      - name: Build Android application
        working-directory: ./usr
        run: flutter build appbundle --release
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-release-bundle
          path: ./usr/build/app/outputs/bundle/release/*.aab
          retention-days: 7
      - name: Install Fastlane
        run: gem install fastlane
      - name: Check Fastlane configuration
        working-directory: ./usr/android
        run: |
          echo "Checking Fastlane directory structure:"
          ls -la fastlane/
          echo "\nChecking Fastfile content:"
          cat fastlane/Fastfile
      # Step 1: Run Fastlane with continue-on-error
      - name: Run Fastlane Publish
        id: run_fastlane
        continue-on-error: true
        working-directory: ./usr/android
        env:
          GOOGLE_PLAY_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
        run: |
          # Create an output file for the results
          echo "Running Fastlane publish_to_play_store"
          OUTPUT_FILE=$(mktemp)
          
          # Run fastlane and capture output and exit code
          if fastlane publish_to_play_store 2>&1 | tee $OUTPUT_FILE; then
            echo "deployment_status=success" >> $GITHUB_OUTPUT
            echo "Fastlane publish completed successfully"
          else
            # Check for draft app error
            if grep -q "Only releases with status draft may be created on draft app" $OUTPUT_FILE; then
              echo "deployment_status=draft_warning" >> $GITHUB_OUTPUT
              echo "::warning::Draft app detected - this is normal for new apps"
            else
              # Any other error
              echo "deployment_status=failure" >> $GITHUB_OUTPUT
              echo "::error::Google Play publish failed with non-draft error"
            fi
          fi
          
          # Display full output
          cat $OUTPUT_FILE
          
      # Step 2: Evaluate results and set proper exit code
      - name: Evaluate Google Play Deployment
        if: always()
        env:
          DEPLOY_STATUS: ${{ steps.run_fastlane.outputs.deployment_status }}
        run: |
          echo "Deployment status: $DEPLOY_STATUS"
          
          if [ "$DEPLOY_STATUS" = "success" ]; then
            echo "✅ Google Play deployment successful"
            exit 0
          elif [ "$DEPLOY_STATUS" = "draft_warning" ]; then
            echo "⚠️ Google Play deployment had draft app warning (normal for new apps)"
            exit 0
          else
            echo "❌ Google Play deployment failed"
            exit 1
          fi
